"""Subclass of mainWindow, which is generated by wxFormBuilder."""

import wx
import UI
import boxee

import time, datetime, platform
from threading import *

BoxeeCli = boxee.BoxeeClient()

# Define notification event for thread completion
EVT_RESULT_ID_DEVICE_LIST = wx.NewId()
EVT_RESULT_ID_TIMER = wx.NewId()

def EVT_RESULT(win, func, result_id):
	win.Connect(-1, -1, result_id, func)

class ResultEvent(wx.PyEvent):
	def __init__(self, data, result_id):
		wx.PyEvent.__init__(self)
		self.SetEventType(result_id)
		self.data = data

class FindDevicesWorker(Thread):
	def __init__(self, notify_window):
		Thread.__init__(self)
		self._notify_window = notify_window
		self._want_abort = 0
		self.start()

	def run(self):
		devices = BoxeeCli.discover()
		wx.PostEvent(self._notify_window, ResultEvent(devices, EVT_RESULT_ID_DEVICE_LIST))

	def abort(self):
		self._want_abort = 1
		

class TimeWorker(Thread):
	def __init__(self, notify_window):
		Thread.__init__(self)
		self._notify_window = notify_window
		self.alive = True
		self.shutdown_time = None

	def setShutdownTime(self, hour, minute):
		self.shutdown_time = datetime.time(hour,minute)
		
	def isAlive(self):
		return self.alive

	def run(self):
		while self.alive:
			if self.shutdown_time != None:
				now = datetime.datetime.time(datetime.datetime.now())
				st = self.shutdown_time
				if st.hour == now.hour and st.minute == now.minute:
					wx.PostEvent(self._notify_window, ResultEvent("shutdown", EVT_RESULT_ID_TIMER))
					time.sleep(60)
			time.sleep(1)

		self.alive = False

	def stop(self):
		self.alive = False


class BoxeeSleep( UI.mainWindow ):
	def __init__( self, parent ):
	
		UI.mainWindow.__init__( self, parent )
		
		self.devices = []
		self.current_device_index = -1
		self.workerDeviceFinder = None

		self.shutdown_time = dict(
			hour=0,
			minute=0
		)
		
		#image_file = 'ioslinenbg.jpg'
		#bmp = wx.Bitmap(image_file)
		#self.bitmap = wx.StaticBitmap(self, wx.ID_ANY, bmp, (0, 0))
		
	
		if "Darwin" in platform.system(): 
			self.menu_bar  = wx.MenuBar()
			self.SetMenuBar(self.menu_bar)

		#init hour and minute selector
		t = []
		for i in range(0,24):
			t.append("%02d" % i)
		self.selectHour.SetItems(t)
		
		t = []
		for i in range(0,60):
			if i % 5 == 0:
				t.append("%02d" % i)
				self.selectMinute.SetItems(t)

		self.selectHour.Bind(wx.EVT_CHOICE, self.onUpdateTime)
		self.selectMinute.Bind(wx.EVT_CHOICE, self.onUpdateTime)
		
		self.btnReloadDevices.Bind(wx.EVT_BUTTON, self.onReloadDeviceList)
		self.btnActivate.Bind(wx.EVT_BUTTON, self.onActivateToggle)
		
		EVT_RESULT(self,self.onDeviceListReceived, EVT_RESULT_ID_DEVICE_LIST)
		self.onReloadDeviceList()
		
		EVT_RESULT(self,self.onTimerEvent, EVT_RESULT_ID_TIMER)
		self.workerTimer = None
		
		self.device_selector.Bind(wx.EVT_CHOICE, self.onSelectDevice)
		
		self.Bind(wx.EVT_MENU, self.onQuit, id=wx.ID_EXIT)
		self.Bind(wx.EVT_CLOSE, self.onQuit)
		
	def onQuit(self,Event):
		if self.workerTimer:
			self.workerTimer.stop()
		if self.workerDeviceFinder:
			self.workerDeviceFinder = None
		self.Destroy()

	def onActivateToggle(self, event):
		
		if self.btnActivate.GetLabel() != "Stop":
			hour = int(self.selectHour.GetStringSelection())
			minute = self.selectMinute.GetStringSelection()
			self.statusBar.SetStatusText(" Sleep timer active. Boxee will go to sleep at %2d:%s." % (hour, minute))
			self.btnActivate.SetLabel("Stop")
			self.btnActivate.SetDefault()
			if self.workerTimer:
				self.workerTimer.stop()
				time.sleep(10)
			self.workerTimer = TimeWorker(self)
			self.workerTimer.setShutdownTime(self.shutdown_time['hour'],self.shutdown_time['minute'])			
			self.workerTimer.start()
		else:
			if self.workerTimer:
				self.workerTimer.stop()
			self.workerTimer = None
			self.btnActivate.SetLabel("Start")
			self.dummyButton.SetDefault()
			self.statusBar.SetStatusText(" Sleep timer stopped.")
	
	def onTimerEvent(self, event):
		if self.workerTimer:
			self.workerTimer.stop()
		BoxeeCli.putDeviceToSleep(self.current_device_index)

		
	def onUpdateTime(self, event):

		self.shutdown_time = dict(
			hour=int(self.selectHour.GetStringSelection()),
			minute=int(self.selectMinute.GetStringSelection())
		)

	def onSelectDevice(self, event):
		self.current_device_index = self.device_selector.GetCurrentSelection()

	def onReloadDeviceList(self, event=None):
		self.statusBar.SetStatusText(" Boxee discovery in progress...")
		self.device_selector.SetItems(['searching...'])
		self.btnReloadDevices.Enable(False)
		if not self.workerDeviceFinder:
			self.workerDeviceFinder = FindDevicesWorker(self)

	def onDeviceListReceived(self, event):
		"""Show Result status."""
		if event.data is None or len(event.data) == 0:
			self.device_selector.SetItems(['No device found...'])
			self.device_selector.Enable( False )
			self.btnActivate.Enable( False )
			self.current_device_index = -1
			self.statusBar.SetStatusText(" Boxee is not running...")
		else:
			self.devices = event.data
			
			items = []
			for i in self.devices:
				items.append("%s:%s" % (i['ip'], i['port']))
			
			self.device_selector.Enable( True )
			self.device_selector.SetItems(items)
			self.device_selector.SetSelection(0)
			self.current_device_index = 0
			self.btnActivate.Enable( True )
			dev = len(self.devices)
			if dev == 1:
				self.statusBar.SetStatusText(" One device found")
			else:
				elf.statusBar.SetStatusText(" %d devices found" % dev)

		self.workerDeviceFinder = None
		
		self.btnReloadDevices.Enable(True)
		self.Update()


class MainApp(wx.App):
	def OnInit(self):
		frame = BoxeeSleep(None)
		frame.Show(True)
		self.SetTopWindow(frame)
		return True

	def MacReopenApp(self):
		self.GetTopWindow().Raise()
		
	def BringWindowToFront(self):
		try:
			self.GetTopWindow().Raise()
		except:
			pass

	def OnActivate(self, event):
		if event.GetActive():
			self.BringWindowToFront()
		event.Skip()

if __name__ == '__main__':
	app = MainApp(0)
	app.MainLoop()